---
heat_template_version: pike

description: >
  Heat stack template for a stack containing one Neutron port which is on
  a named network and subnet (and does not have a floating IP)

parameters:
  node_idx:
    type: number
    label: Node index within cluster group
  cluster_net:
    type: json
    label: Network names and subnets to which the nodes should be attached
  cluster_fips:
    type: json
    label: List of UUIDs of prealloacted floating IPs
    default: []
  default_security_groups:
    type: json
    label: List of UUIDs/names of default security groups 
    default: []

conditions:
  security_groups_set:
    yaql:
      expression: $.data.cluster_net.containsKey('security_groups')
      data:
        cluster_net: { get_param: [ cluster_net, 0 ] }
  port_pt:
    yaql:
        expression: $.data.cluster_net.containsKey('ptg')
        data:
          cluster_net: { get_param: [ cluster_net, 0 ] }

resources:

  port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: [ cluster_net, 0, net ] }
      security_groups:
        if:
          - security_groups_set
          - { get_param: [ cluster_net, 0, security_groups ] }
          - { get_param: default_security_groups }
      name:
        str_replace:
          template: pt%-idx%
          params:
            "pt%":  {get_param: [ cluster_net, 0, name ] }
            "idx%": { get_param: node_idx }

  pt:
    type: OS::GroupBasedPolicy::PolicyTarget
    properties:
      policy_target_group_id: { get_param: [ cluster_net, 0, ptg ] }
      port_id: { get_resource: port }
      name:
        str_replace:
          template: pt%-idx%
          params:
            "pt%":  {get_param: [ cluster_net, 0, name ] }
            "idx%": { get_param: node_idx }
    condition: port_pt


outputs:
  OS::stack_id:
    description: The network list
    value:
      - port: { get_resource: port }

  networks:
    description: The network list
    value:
      - port: { get_resource: port }

  primary_ip:
    description: ID of the IP assigned on the named cluster network
    value: { get_attr: [ port, fixed_ips, 0, ip_address ] }
