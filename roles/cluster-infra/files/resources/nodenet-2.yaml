---
heat_template_version: pike

description: >
  Heat stack template for a stack containing three Neutron ports.
  Each is on a named network and subnet (and does not have a floating IP).
  The first port listed is considered a primary interface, and the IP
  associated with the first port is used for subsequent interaction with
  the node.

parameters:
  node_idx:
    type: number
    label: Node index within cluster group
  cluster_net:
    type: json
    label: Network names and subnets to which the nodes should be attached
  cluster_fips:
    type: json
    label: List of UUIDs of prealloacted floating IPs
    default: []
  default_security_groups:
    type: json
    label: List of UUIDs/names of default security groups
    default: []

conditions:
  security_groups_set1:
    yaql:
      expression: $.data.cluster_net.containsKey('security_groups')
      data:
        cluster_net: { get_param: [ cluster_net, 0 ] }

  security_groups_set2:
    yaql:
      expression: $.data.cluster_net.containsKey('security_groups')
      data:
        cluster_net: { get_param: [ cluster_net, 1 ] }

  port_type1: 
    yaql:
      expression: $.data.cluster_net.containsKey('port_type')
      data:
        cluster_net: { get_param: [cluster_net, 0 ] }

  port_type2: 
    yaql:
      expression: $.data.cluster_net.containsKey('port_type')
      data:
        cluster_net: { get_param: [cluster_net, 1 ] }
  is_pt1:
    yaql:
      expression: $.data.cluster_net.containsKey('ptg')
      data:
        cluster_net: { get_param: [ cluster_net, 0 ] }
  is_pt2:
    yaql:
        expression: $.data.cluster_net.containsKey('ptg')
        data:
          cluster_net: { get_param: [ cluster_net, 1 ] }

resources:

  port1:
    type: OS::Neutron::Port
    properties:
      network: { get_param: [ cluster_net, 0, net ] }
      binding:vnic_type:
        if: 
          - port_type1
          - { get_param: [ cluster_net, 0, port_type ] }
          - "normal"
      security_groups:
        if:
          - security_groups_set1
          - { get_param: [ cluster_net, 0, security_groups ] }
          - { get_param: default_security_groups }
      name:
        str_replace:
          template: pt%-idx%
          params:
            "pt%":  {get_param: [ cluster_net, 0, name ] }
            "idx%": { get_param: node_idx }
  pt1:
    type: OS::GroupBasedPolicy::PolicyTarget
    properties:
      port_id: { get_resource: port1 }
      policy_target_group_id: { get_param: [ cluster_net, 0, ptg ] }
      name:
        str_replace:
          template: pt%-idx%
          params:
            "pt%":  {get_param: [ cluster_net, 0, name ] }
            "idx%": { get_param: node_idx }
    condition: is_pt1

  port2:
    type: OS::Neutron::Port
    properties:
      binding:vnic_type:
        if: 
          - port_type2
          - { get_param: [ cluster_net, 1, port_type ] }
          - "normal"
      network: { get_param: [ cluster_net, 1, net ] }
      security_groups:
        if:
          - security_groups_set2
          - { get_param: [ cluster_net, 1, security_groups ] }
          - { get_param: default_security_groups }
      name:
        str_replace:
          template: pt%-idx%
          params:
            "pt%":  {get_param: [ cluster_net, 1, name ] }
            "idx%": { get_param: node_idx }
 
  pt2:
    type: OS::GroupBasedPolicy::PolicyTarget
    properties:
      port_id: { get_resource: port2 }
      policy_target_group_id: { get_param: [ cluster_net, 1, ptg ] }
      name:
        str_replace:
          template: pt%-idx%
          params:
            "pt%":  {get_param: [ cluster_net, 1, name ] }
            "idx%": { get_param: node_idx }
    condition: is_pt2


outputs:
  OS::stack_id:
    description: The network list
    value:
      - port1: { get_resource: port1 }
      - port2: { get_resource: port2 }


  networks:
    description: The network list
    value:
      - port: { get_resource: port1 }
      - port: { get_resource: port2 }

  primary_ip:
    description: ID of the IP assigned on the named cluster network
    value: { get_attr: [ port1, fixed_ips, 0, ip_address ] }
