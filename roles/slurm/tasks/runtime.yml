---
- name: Fail if role_slurm_control_host or role_slurm_cluster_name or role_slurm_partitions are undefined
  run_once: true
  ansible.builtin.fail:
    msg: Undefined role_slurm_control_host or role_slurm_cluster_name or role_slurm_partitions.
  when: role_slurm_control_host == none or role_slurm_cluster_name == none or role_slurm_partitions | length == 0

- name: Install Runtime Slurm packages
  ansible.builtin.yum:
    name:
      - slurm
      - slurm-slurmd
    state: installed

- name: Copy slurm_completion.sh
  ansible.builtin.copy:
    src: slurm_completion.sh
    dest: /etc/bash_completion.d/
    mode: "0644"

- name: Ensure the Slurm spool directory exists
  ansible.builtin.file:
    path: /var/spool/slurm
    owner: slurm
    group: slurm
    mode: "0755"
    state: directory
  when: role_slurm_enable.runtime | bool

- name: Ensure the Munge service is enabled
  ansible.builtin.service:
    name: munge
    enabled: "{{ role_slurm_service_enabled | bool }}"
  notify:
    - Restart Munge service

- name: Generate Munge key
  when: role_slurm_munge_key is not defined
  delegate_to: "{{ role_slurm_control_host }}"
  run_once: true
  block:
    - name: Generate a Munge key for the platform
      ansible.builtin.command: dd if=/dev/urandom of=/etc/munge/munge.key bs=1 count=1024
      args:
        creates: /etc/munge/munge.key
      notify:
        - Restart Munge service

    - name: Fix munge key permissions
      ansible.builtin.file:
        path: /etc/munge/munge.key
        owner: munge
        group: munge
        mode: "0400"

- name: Generate a JWT key for Slurm REST
  when: role_slurm_jwt_key is not defined and role_slurm_enable_rest
  delegate_to: "{{ role_slurm_control_host }}"
  run_once: true
  tags: rest
  block:
    - name: Generate a JWT key if not provided externally
      ansible.builtin.command: dd if=/dev/urandom of=/etc/slurm/jwt.key bs=32 count=1
      args:
        creates: /etc/slurm/jwt.key
      notify:
        - Restart slurmctld
        - Restart slurmrestd

    - name: Fix JWT key permissions
      ansible.builtin.file:
        path: /etc/slurm/jwt.key
        owner: slurm
        group: slurm
        mode: "0600"


- name: Copy external munge key if provided
  ansible.builtin.copy:
    content: "{{ role_slurm_munge_key | b64decode }}"
    dest: /etc/munge/munge.key
    owner: munge
    group: munge
    mode: "0400"
  delegate_to: "{{ role_slurm_control_host }}"
  run_once: true
  when: role_slurm_munge_key is defined
  notify:
    - Restart Munge service

- name: Copy external JWT key if provided
  ansible.builtin.copy:
    content: "{{ role_slurm_jwt_key | b64decode }}"
    dest: /etc/slurm/jwt.key
    owner: slurm
    group: slurm
    mode: "0600"
  when: role_slurm_jwt_key is defined and role_slurm_enable_rest
  delegate_to: "{{ role_slurm_control_host }}"
  run_once: true
  tags: rest
  notify:
    - Restart slurmctld
    - Restart slurmrestd
    - Restart slurmdbd

- name: Make sure that Munge is running on control host
  ansible.builtin.service:
    name: munge
    state: started
  delegate_to: "{{ role_slurm_control_host }}"
  run_once: true

- name: Retrieve Munge key from Slurm control host
  ansible.builtin.slurp:
    src: /etc/munge/munge.key
  register: slurm_munge_key
  delegate_to: "{{ role_slurm_control_host }}"
  run_once: true

- name: Write Munge key
  ansible.builtin.copy:
    content: "{{ slurm_munge_key['content'] | b64decode }}"
    dest: /etc/munge/munge.key
    owner: munge
    group: munge
    mode: "0400"
  notify:
    - Restart Munge service

- name: Retrieve JWT key from Slurm control host
  ansible.builtin.slurp:
    src: /etc/slurm/jwt.key
  register: slurm_jwt_key
  delegate_to: "{{ role_slurm_control_host }}"
  run_once: true
  when: role_slurm_enable_rest
  tags: rest

- name: Write JWT key
  ansible.builtin.copy:
    content: "{{ slurm_jwt_key['content'] | b64decode }}"
    dest: /etc/slurm/jwt.key
    owner: slurm
    group: slurm
    mode: "0400"
  delegate_to: "{{ role_slurm_db_host }}"
  run_once: true
  notify:
    - Restart slurmctld
    - Restart slurmrestd
    - Restart slurmdbd
  when: role_slurm_enable_rest
  tags: rest

- name: Add slurm log dir
  ansible.builtin.file:
    path: /var/log/slurm
    state: directory
    owner: slurm
    group: slurm
    mode: "0750"
  when: role_slurm_enable.runtime | bool

- name: Ensure Slurmdbd service is enabled
  ansible.builtin.service:
    name: slurmdbd
    enabled: "true"
  delegate_to: "{{ role_slurm_db_host }}"
  run_once: true
  notify:
    - Restart slurmdbd

- name: Ensure Slurm services are enabled
  ansible.builtin.service:
    name: "{{ role_slurm_service }}"
    enabled: "{{ role_slurm_service_enabled | bool }}"
  when: role_slurm_service is not none
  notify:
    - Restart SLURM service

- name: Make sure to call reconfigure
  ansible.builtin.set_fact:
    role_slurm_reconfigure: true
  tags:
    - never
    - reconfigure

- name: Apply customised SLURM configurations on controller
  run_once: true
  tags: reconfigure
  ansible.builtin.template:
    src: "{{ item }}"
    dest: /etc/slurm/{{ item | regex_replace('\.j2', '') }}
    owner: root
    group: root
    mode: "0644"
    backup: true
  delegate_to: "{{ role_slurm_control_host }}"
  register: slurm_changed_result
  with_items:
    - slurm.conf.j2
    - cgroup.conf.j2
    - gres.conf.j2
    - job_container.conf.j2
  notify:
    - Restart slurmctld
    - Restart SLURM service

- name: Copy sysconfig for configless slurm
  ansible.builtin.template:
    mode: "0644"
    src: sysconfig.j2
    dest: /etc/sysconfig/slurmd
  when: (role_slurm_enable.batch | bool or role_slurm_enable.slurmd | bool) and not role_slurm_configless_dns | bool
  notify:
    - Restart SLURM service

- name: Flush handlers
  ansible.builtin.meta: flush_handlers
- name: Ensure Slurmdbd service is running
  ansible.builtin.service:
    name: slurmdbd
    state: started
  delegate_to: "{{ role_slurm_db_host }}"
  run_once: true

# In case the service isn't running and the config hasn't changed to trigger
# the handler, ensure it's running here.
- name: Ensure Slurm services are running
  ansible.builtin.service:
    name: "{{ role_slurm_service }}"
    state: "{{ 'started' if role_slurm_service_enabled | bool else 'stopped' }}"
  when: role_slurm_service is not none

- name: Add cluster to SlurmDBD
  when: role_slurm_db_host is defined
  delegate_to: "{{ role_slurm_control_host }}"
  run_once: true
  block:
    - name: Add cluster to accounting
      clip.hpc.slurm:
        state: present
        entity: cluster
        name: "{{ role_slurm_cluster_name }}"
      notify:
        - Restart slurmctld

    - name: Flush handlers
      ansible.builtin.meta: flush_handlers

- name: Add QOS settings to cluster
  when: role_slurm_db_host is defined
  delegate_to: "{{ role_slurm_control_host }}"
  run_once: true
  block:
    - name: Add QOS
      tags: qos
      clip.hpc.slurm:
        state: present
        entity: qos
        name: "{{ item.name }}"
        priority: "{{ item.priority | default(omit) }}"
        maxtres: "{{ item.maxtres | default(omit) }}"
        grptres: "{{ item.grptres | default(omit) }}"
        maxwall: "{{ item.maxwall | default(omit) }}"
        maxtresperuser: "{{ item.maxtresperuser | default(omit) }}"
      with_items: "{{ role_slurm_qos }}"

    - name: Add custom QOSes to root user
      tags: qos
      clip.hpc.slurm:
        state: present
        entity: user
        name: root
        account: root
        qoslevel: "{{ role_slurm_qos | map(attribute='name') | join(',') }}"
        defaultqos: "{{ role_slurm_default_qos | default((role_slurm_qos | first).name) }}"
      when: role_slurm_qos | length > 0
      changed_when: false # required because not idempotent

    - name: Add custom QOSes to cluster
      tags: qos
      clip.hpc.slurm:
        state: present
        entity: cluster
        name: "{{ role_slurm_cluster_name }}"
        qoslevel: "{{ role_slurm_qos | map(attribute='name') | join(',') }}"
        defaultqos: "{{ role_slurm_default_qos | default((role_slurm_qos | first).name) }}"
      when: role_slurm_qos | length > 0
      changed_when: false # required because not idempotent
