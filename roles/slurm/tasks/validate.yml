# Playbook to validate slurm setup
---
# can only check availability (%a) but not state (%t) because state of node is unk (unknown) instead of idle
- name: Run sinfo_cmd # noqa command-instead-of-shell
  ansible.builtin.shell: bash -lc 'sinfo -o %P,%a,%t'
  register: sinfo_cmd
  changed_when: false
  until: sinfo_cmd.stdout.find("unk") == -1
  retries: 10
  delay: 5

- name: Check number of partitions match
  vars:
    expected_slurm_partitions: "{{ role_slurm_partitions | json_query('[?!(hidden)]') }}"
  ansible.builtin.assert:
    that:
      - (sinfo_cmd.stdout_lines | length) - 1 >= (expected_slurm_partitions | int)
    msg: Expected ({{ expected_slurm_partitions }}) but found {{ (sinfo_cmd.stdout_lines | length) - 1 }}

- name: Check that all partitions are up
  ansible.builtin.assert:
    that: not item.endswith(',unk,idle')
  with_items: "{{ sinfo_cmd.stdout_lines[1:] }}"

- name: Run sacctmgr
  ansible.builtin.command: /bin/sacctmgr list -nP cluster format=cluster,ControlPort,QOS
  register: sacctmgr_cmd
  changed_when: false

- name: Split sacctmgr result
  ansible.builtin.set_fact:
    sacctmgr_result: "{{ sacctmgr_cmd.stdout_lines[0].split('|') }}"

- name: Check cluster info
  ansible.builtin.assert:
    that:
      - sacctmgr_result[0] == '{{ role_slurm_cluster_name }}'
      - sacctmgr_result[1] == '6817'
      - "(sacctmgr_result[2].split(',') | sort | join(',')) == '{{ role_slurm_qos | map(attribute='name') | sort | join(',') }}' "

- name: Run test job
  ansible.builtin.command: /bin/srun hostname
  register: srun_cmd
  changed_when: false

- name: Check that srun worked
  ansible.builtin.assert:
    that: srun_cmd.stdout | length > 0

- name: Get accounting information
  ansible.builtin.command: /bin/sacct -nP --format=JobName,State
  register: sacct_cmd
  changed_when: false
  until: (sacct_cmd.stdout_lines | length > 1) and sacct_cmd.stdout_lines[-1].find("COMPLETED") != -1 and sacct_cmd.stdout_lines[-2].find("COMPLETED") != -1
  retries: 10
  delay: 5

- name: Store last two rows of accounting
  ansible.builtin.set_fact:
    sacct_rows: "{{ sacct_cmd.stdout_lines[-2:] | sort }}"

- name: Check accounting information
  ansible.builtin.assert:
    that:
      - sacct_rows[0] | trim == 'extern|COMPLETED'
      - sacct_rows[1] | trim == 'hostname|COMPLETED'
